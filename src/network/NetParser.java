/**
 * 
 */
package network;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Locale;
import java.util.Scanner;
/**
 * Reads a .net file generated by JavaNNS with 1 input layer, 1 hidden layer and 1 output layer.
 * @author Daniel
 *
 */
public class NetParser {
	private String path;
	protected int inputNeurons;
	protected int hiddenNeurons;
	protected int outputNeurons;
	protected ArrayList <Double> inputNeuronsBiases;
	protected ArrayList <Double> hiddenNeuronsBiases;
	protected ArrayList <Double> outputNeuronsBiases;
	protected ArrayList <ArrayList <Double>> hiddenConnections;
	protected ArrayList <ArrayList <Double>> outputConnections;
	private Scanner s;
	private Scanner lineScanner;
	private boolean weightsInverted = false;
	private boolean weightsInvertedChecked = false;
	private double firstWeight;
	
	public NetParser (String path, int inputNeurons, int hiddenNeurons, int outputNeurons){	
		this.path = path;
		this.inputNeurons = inputNeurons;
		this.hiddenNeurons = hiddenNeurons;
		this.outputNeurons = outputNeurons;
		inputNeuronsBiases = new ArrayList <Double> (inputNeurons);
		hiddenNeuronsBiases = new ArrayList <Double> (hiddenNeurons);
		outputNeuronsBiases = new ArrayList <Double> (outputNeurons);
		hiddenConnections = new ArrayList <ArrayList <Double>> (hiddenNeurons);
		outputConnections = new ArrayList <ArrayList <Double>> (outputNeurons);
	}
	
	public void parse (){
		//Open file
		File f = new File(path);
		try {
			s = new Scanner (f);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//Biases start in line 28.
		for (int i = 0; i < 27; i++)
			s.nextLine();
		
		//Parse input layer biases
		for (int i = 0; i < inputNeurons; i++){			
			inputNeuronsBiases.add(getBiasInLine(s.nextLine()));
		}		
		
		//Parse hidden layer biases
		for (int i = 0; i < hiddenNeurons; i++){
			hiddenNeuronsBiases.add(getBiasInLine(s.nextLine()));
		}
		
		//Parse output layer biases

		for (int i = 0; i < outputNeurons; i++){
			outputNeuronsBiases.add(getBiasInLine(s.nextLine()));
		}
		
		//Skip 7 lines
		for (int i = 0; i < 7; i++)
			s.nextLine();
				
		//Parse connections
		for (int i = 0; i < hiddenNeurons; i++){	
			hiddenConnections.add(getWeightsInLine(s.nextLine(), inputNeurons));
		}
		
		for (int i = 0; i < outputNeurons; i++){
			outputConnections.add(getWeightsInLine(s.nextLine(), hiddenNeurons));
		}
		
		//Check if JavaNNS inverted the weights
		checkWeightInversion();
	}
	
	private void checkWeightInversion(){
		if (weightsInverted){
			System.out.println("Weights inverted!");
			for (int i = 0; i < hiddenConnections.size(); i++)				
				Collections.reverse(hiddenConnections.get(i));
			
			for (int i = 0; i < outputConnections.size(); i++)
				Collections.reverse(outputConnections.get(i));
		}
	}
	
	private double getBiasInLine (String line){
		//Remove all unnecessary characters.
		line = line.replaceAll("\\|", "");
		
		//Replace commas
		line = line.replaceAll(",", ".");
		
		//Parse the line		
		lineScanner = new Scanner (line);
		lineScanner.useLocale(Locale.US);
		
		//Skip to 4rd token
		for (int j = 0; j < 3; j++)
			lineScanner.next();
		
		//Use 4rd token as a bias
		return lineScanner.nextDouble();		
	}
	
	private ArrayList <Double> getWeightsInLine (String line, int connections){
		line = line.replaceAll("\\|", "");
		line = line.replaceAll(", ", " ");
		line = line.replaceAll(",", ".");
		line = line.replaceAll("-", " -");
		//System.out.println(line);
		lineScanner = new Scanner (line);
		lineScanner.useLocale(Locale.US);
		
		//Skip first double
		lineScanner.nextDouble();
		
		ArrayList <Double> currentConnections = new ArrayList <Double> ();
		
		for (int j = 0; j < connections; j++){
			//Skip the index, proccessing the first and the seconds in case the weights are inverted.
			if (j == 0 && !weightsInvertedChecked){
				//Extract the integer and store it
				String firstIndex = lineScanner.next(".:");
				firstIndex = firstIndex.replace(":", "");
				firstWeight = Integer.valueOf(firstIndex);
			}else if (j == 1 && !weightsInvertedChecked){
				//Extract the interger and compare it to the first one
				String secondIndex = lineScanner.next(".:");
				secondIndex = secondIndex.replace(":", "");
								
				if (firstWeight > Integer.valueOf(secondIndex)){
					weightsInverted = true;
				}
				weightsInvertedChecked = true;
			}else
				lineScanner.next();
			
			//Insert connection
			currentConnections.add(lineScanner.nextDouble());				
		}
		
		return (currentConnections);		
	}
}
